Tinus F Alsos og Johan Bjerkem

Testing:
We have tested the files using assertion tests. These tests can be found in the folder tests. Here you can run the tests for each file induvidually. Other then that we have a main method in the ship.py which simulates the loading of a ship. This main method prints the results and was a sanity check that our program runs as expected. The ship in the main function is loaded with containers created randomly. Feel free to change the seed and verify that the program runs as expected.

Error handling:
There isn't a lot of error handling in the code. This is because the program is to be viewed as a contract between the creator and user. The user is expected to read this file and the code to be able to use the program as intended. The user can also look at the main in ship.py to see how one uses the program with regards to ship handeling.

2.1 Containers
Task 1 and 3 have been done in container.py. We created container as a class where the user can choose the size, load and ID. In the top of the file the possible container sizes are stored. The user can also create one or more containers at random, where size, load and ID is created at random.

Task 2 have been done in containerStack.py. The datastructure is created with the future architecture of the ship in mind. Therefore each level in a stack contains either a 40ft container or two 20ft containers. This means removing a 20ft container results in both containers at the same level being retrieved, so that the user of the program can decide what to do with the other container. Each stack is imagined to be handled by a crane, so to remove a container at the bottom, all the container on top of the container needs to be moved first.

Task 4 have also been done in containerStack.py. The containers are written to a tsv in descending order seperated by a hyphen. Because of this ordering it is possible to load the information from the file in the same order to recreate the datastructure.

2.2 Ships 
WRITE ASSUMPTION ABOUT LENGTH, WIDTH AND HEIGHT
Task 5 has been done the containerStack.py, shipSection.py and ship.py. This is a hierarchical structure where a Ship has 6 ShipSections and each ShipSection has one ContainerStack for each cell in base of the ship. When a 20ft container is loaded we wait for the next one so we can ensure that there a no holes. 

Task 6 has been done in ship.py. Each line in the tsv file represents a stack in ascending order. The sections are seperated by a line of text indicating which section the containers belong to. This structure makes it possible to also read from file to recreate the ship. readFromFile() return a ship.

Task 7,8 and 10 have been done together, as they serve the same purpose. As the ship is divied into the sections which is used calculate the balance of the ship the loading of the ship is straight forward. When a create is loaded we find the lightest stack in the lightest section and load the container. The ship is usually balanced by 150 containers, and it usually carries 6300 containers. We therefore make an assumption that the ship carries more than 150 containers.

Task 9 has been done in ship.py. As the ship is already diveded into sections calculating the balance is straight forward. When the function is called a boolean is retrieved, and if the ship is not balanced a text prompt is given to tell the user what constraint is broken.

2.3 Docks
Task 11 was done by counting every time a container is moved. We usually use 28000 crane operations which equals approximatly 78 days. Unloading a full ship would usually take 6300 crane opereations (one operations per crate). That would result in approximatly 18 days.

Task 12 was done by creating new functions that take into account that four cranes is being used. The function returns a four lists with the activity of each crane, meaning at which time they operated which cell. We run through this crane activity and if two cranes operate in adjecent bays we add a punishment operation. This is not a perfect solution but gives a pretty good estiamtion of how long time it would take. On the example in the main of ship one crane uses 108316 minutes and four cranes takes 31812 minutes. This mean it takes between 1/4 and 1/3 of the time using four cranes compared to one.